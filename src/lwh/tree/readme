1) 什么是生产端的可靠性投递?
保障消息的成功发出
保障MQ节点的成功接收
发送端接收到MQ节点(Broker)确认应答
完善的消息进行补偿机制

BAT/TMD互联网大厂的解决方案

方式1：消息落库,对消息状态进行打标
1)发送方将业务数据进行入库到BIZ_DB,将消息入库到MSG_DB,status置为0,只要有一步操作失败,就不进行下一步操作,如果该步骤
失败,进行快速失败的机制
2)发送方给MQ发送消息
3)MQ接收到消息后给发送方确认
4)发送方监听到该确认消息后将消息status置为1,这是正常成功的逻辑
5)发送方有一个分布式的定时任务,扫描表中超时的status为0的消息,超时时间比如说可以设置为2min
6)对于status为0的消息,进行重新发送
7)设置最大重试次数,如Retry_count > 3时将该消息status置为2

注意:
1)业务数据和消息可以落到一个库里.对于落到两个库里,对于小规模的设计应用,可以开启事务,保证数据源都是一致的.对于大规模、
高并发情况下,没听说有大的互联网公司有开启事务,采用补偿机制.
2)不好的地方:步骤1需要对数据库持久化2次
3)分布式定时任务,保证同一时间点只有一个任务去抓取DB

第一个可靠性投递,在高并发场景下是否适合?第一种方式需要入库两次,高并发情况下对数据库压力大.

方式2:消息的延迟投递,做二次确认,回调检查(接收海量的数据),不能100%成功,人工或定时任务补偿,对于核心链路,减少数据库操作
UpStream上游服务生产端,DownStream下游服务消费端,Callback回调服务
1)业务数据落库,仅做一次入库,一次性生成两条消息,然后发送第一条MQ消息到消息中间件
2)第二条MQ消息延迟一段时间再发,延迟投递
3)消费者进行监听并消费消息
4)消费完成之后消费端在发送确认消息到MQ
5)Callback服务监听该确认消息,Callback知道下游成功处理了,Callback对该消息进行入库
6)Callback监听延迟投递的消息,检查MSG DB数据库,发现该消息已经成功处理
7)如果之前出现异常,MSG DB中没有该消息,Callback会RPC调用UpStream重新发送MQ消息

注意:
1)一定是业务数据落库以后,再发送消息
2)不加事务,事务会造成严重的性能瓶颈
3)Callback只是一个补偿服务,它不是核心链路上的